networks:
  api-network:
    external: true
    name: "mongo-network"

services:
  api:
    image: doconnor/movies-api:1.0
    container_name: movies-api
    platform: linux/amd64
    restart: always
    ports:
      - "9000:9000"
    environment:
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017
      - REDIS_URI=redis://redis:6379
      - ENABLE_WRITING_HANDLERS=false
    networks:
      - api-network
    depends_on:
      - mongodb
      - redis

  mongodb:
    image: mongo:8.0-rc
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - api-network
    volumes:
      - data:/data/db

  mongodb-seed:
    image: mongo:8.0-rc
    container_name: mongodb-seed
    depends_on:
      - mongodb
    profiles:
      - dev
    networks:
      - api-network
    volumes:
      - ./seeding.json:/mongodb-init/seeding.json
    links:
      - mongodb
    command: mongoimport --host mongodb --db tmdb_movies --collection movies --authenticationDatabase admin --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD} --drop --jsonArray --file /mongodb-init/seeding.json

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - api-network

  mongo-express:
    container_name: express
    image: mongo-express:1.0-20-alpine3.19
    restart: always # fixes MongoNetworkError caused by mongodb not being ready when mongo-express starts.
    ports:
      - 8080:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=mongodb
    networks:
      - api-network
    depends_on:
      - mongodb
    profiles:
      - dev

volumes:
  data:
